package text

import (
	"bytes"
	"fmt"
	"github.com/jamesruan/golf/event"
	"path"
	"runtime"
)

var (
	Console = New(Ldatetime | CLcolor)
)

type TextFormatter struct {
	flags ConsoleSinkFlags
}

func New(flags ConsoleSinkFlags) *TextFormatter {
	return &TextFormatter{
		flags: flags,
	}
}

func (l *TextFormatter) Format(e *event.Event) []byte {
	b := new(bytes.Buffer)
	if l.flags&Ldatetime != 0 {
		var s string
		if l.flags&Lmicroseconds != 0 {
			s = e.Time.Format("2006/01/02 15:04:05.000 ")
		} else {
			s = e.Time.Format("2006/01/02 15:04:05 ")
		}
		b.WriteString(s)
	}

	simple := e.Level == event.NOLEVEL
	if !simple {
		if l.flags&CLcolor != 0 {
			fmt.Fprintf(b, "\x1b[%dm%s\x1b[0m ", l.levelColor(e.Level), e.Level)
		} else {
			fmt.Fprintf(b, "[%s] ", e.Level)
		}
	}

	if len(e.Topic) > 0 {
		fmt.Fprintf(b, "\x1b[92m%s\x1b[0m ", e.Topic)
	}

	if !simple && l.flags&Lframes == 0 {
		if len(e.Pc) > 0 {
			frames := runtime.CallersFrames(e.Pc)
			f, more := frames.Next()
			for f.File == "<autogenerated>" && more {
				f, more = frames.Next()
			}
			if l.flags&Llongfile != 0 {
				fmt.Fprintf(b, "%s:%d: ", f.File, f.Line)
			} else {
				fmt.Fprintf(b, "%s:%d: ", path.Base(f.File), f.Line)
			}
		} else {
			fmt.Fprint(b, "???:0: ")
		}
	}

	if len(e.Args) > 0 {
		fmt.Fprintf(b, e.Fmt, e.Args...)
	} else {
		b.WriteString(e.Fmt)
	}

	if l := e.Fields.Length(); l > 0 {
		var i uint
		for i = 0; i < l; i++ {
			field, _ := e.Fields.Get(i)
			f := field.(event.Field)
			fmt.Fprintf(b, " %s=%v", f.Name, f.Value)
		}
	}

	if !simple && l.flags&Lframes != 0 && len(e.Pc) > 0 {
		frames := runtime.CallersFrames(e.Pc)
		for {
			f, more := frames.Next()
			for f.File == "<autogenerated>" && more {
				f, more = frames.Next()
			}
			fmt.Fprintf(b, "\n\t%s (in %s:%d)", f.Function, path.Base(f.File), f.Line)
			if !more {
				break
			}
		}
	}

	b.WriteByte(byte('\n'))
	return b.Bytes()
}

func (TextFormatter) levelColor(l event.Level) int {
	switch l {
	case event.DEBUG:
		return 37 //white
	case event.INFO:
		return 34 //blue
	case event.WARN:
		return 33 //yellow
	case event.ERROR:
		fallthrough
	case event.FATAL:
		return 31 //red
	default:
		return 0 // nocolor
	}
}

type ConsoleSinkFlags uint32

const (
	Llongfile     = 1 << iota           // full file name and line number: /a/b/c/d.go:23
	Ldatetime                           // the date in the local time zone: 2009/01/23
	Lmicroseconds                       // microsecond resolution: 01:23:23.123123.  assumes Ldatatime.
	Lframes                             // display calling stack frames
	CLcolor                             // colorize
	LstdFlags     = CLcolor | Ldatetime // initial values for the standard logger
)
